AWSTemplateFormatVersion: '2010-09-09'
Description: 'Logger for services'
Parameters:
  Env:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  PublicSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  AMI:
    Type: 'AWS::EC2::Image::Id'
  InstanceType:
    Type: String
    Default: t3a.nano
  InstanceQty:
    Type: Number
    Default: 3
  ServiceName:
    Type: String
  HealthCheckPath:
    Type: String
  Port:
    Type: Number

Resources:
  ServiceConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      SecurityGroups:
        - !Ref ServiceSecurityGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: 2
            VolumeType: gp3
            DeleteOnTermination: "true"

  ASService:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref 'ServiceConfig'
      TerminationPolicies:
        - OldestInstance
      DesiredCapacity: !Ref InstanceQty
      MinSize: '0'
      MaxSize: !Ref InstanceQty
      TargetGroupARNs:
        - !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${ServiceName}-Service'
          PropagateAtLaunch: 'true'
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub '${ServiceName} ingress'
      VpcId: !Ref VPC
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: '30'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: '5'
      HealthyThresholdCount: '3'
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref Port
      Port: !Ref Port
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: !Ref Port
      Protocol: HTTP

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: 
      - !Ref ServiceSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ServiceName}-ALB'

Outputs:
  SecurityGroup:
    Value: !Ref ServiceSecurityGroup
